//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/hecto/RiderProjects/BRAQ/BRAQ_grammar\BRAQParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class BRAQParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQUALS=1, PLUS=2, MINUS=3, STAR=4, SLASH=5, MODULUS=6, AT_OPERATOR=7, 
		NUMBER=8, LBRACKET=9, RBRACKET=10, SEMICOLON=11, NEWLINE=12, SPACE=13, 
		VAR=14, PRINT=15, READ=16, STRING=17, ID=18;
	public const int
		RULE_program = 0, RULE_stmt = 1, RULE_var_stmt_base = 2, RULE_print_stmt_base = 3, 
		RULE_assign_stmt_base = 4, RULE_read_stmt_base = 5, RULE_function_def_base = 6, 
		RULE_expr = 7, RULE_group = 8, RULE_call = 9, RULE_arg_list = 10, RULE_literal = 11, 
		RULE_var_node = 12;
	public static readonly string[] ruleNames = {
		"program", "stmt", "var_stmt_base", "print_stmt_base", "assign_stmt_base", 
		"read_stmt_base", "function_def_base", "expr", "group", "call", "arg_list", 
		"literal", "var_node"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'@'", null, "'('", "')'", 
		"';'", null, null, "'var'", "'print'", "'read'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQUALS", "PLUS", "MINUS", "STAR", "SLASH", "MODULUS", "AT_OPERATOR", 
		"NUMBER", "LBRACKET", "RBRACKET", "SEMICOLON", "NEWLINE", "SPACE", "VAR", 
		"PRINT", "READ", "STRING", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BRAQParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BRAQParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BRAQParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BRAQParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(BRAQParser.Eof, 0); }
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << PRINT) | (1L << READ) | (1L << ID))) != 0)) {
				{
				{
				State = 26; stmt();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 32; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public Var_stmt_baseContext containing_var;
		public Print_stmt_baseContext containing_print;
		public Assign_stmt_baseContext containing_assign;
		public Read_stmt_baseContext containing_read;
		public Function_def_baseContext containing_def;
		public ITerminalNode SEMICOLON() { return GetToken(BRAQParser.SEMICOLON, 0); }
		public Var_stmt_baseContext var_stmt_base() {
			return GetRuleContext<Var_stmt_baseContext>(0);
		}
		public Print_stmt_baseContext print_stmt_base() {
			return GetRuleContext<Print_stmt_baseContext>(0);
		}
		public Assign_stmt_baseContext assign_stmt_base() {
			return GetRuleContext<Assign_stmt_baseContext>(0);
		}
		public Read_stmt_baseContext read_stmt_base() {
			return GetRuleContext<Read_stmt_baseContext>(0);
		}
		public Function_def_baseContext function_def_base() {
			return GetRuleContext<Function_def_baseContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 34; _localctx.containing_var = var_stmt_base();
				}
				break;
			case 2:
				{
				State = 35; _localctx.containing_print = print_stmt_base();
				}
				break;
			case 3:
				{
				State = 36; _localctx.containing_assign = assign_stmt_base();
				}
				break;
			case 4:
				{
				State = 37; _localctx.containing_read = read_stmt_base();
				}
				break;
			case 5:
				{
				State = 38; _localctx.containing_def = function_def_base();
				}
				break;
			}
			State = 41; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_stmt_baseContext : ParserRuleContext {
		public IToken id_name;
		public ExprContext assignee;
		public ITerminalNode VAR() { return GetToken(BRAQParser.VAR, 0); }
		public ITerminalNode ID() { return GetToken(BRAQParser.ID, 0); }
		public ITerminalNode EQUALS() { return GetToken(BRAQParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Var_stmt_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_stmt_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterVar_stmt_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitVar_stmt_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_stmt_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_stmt_baseContext var_stmt_base() {
		Var_stmt_baseContext _localctx = new Var_stmt_baseContext(Context, State);
		EnterRule(_localctx, 4, RULE_var_stmt_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; Match(VAR);
			State = 44; _localctx.id_name = Match(ID);
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 45; Match(EQUALS);
				State = 46; _localctx.assignee = expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_stmt_baseContext : ParserRuleContext {
		public ExprContext arg;
		public ITerminalNode PRINT() { return GetToken(BRAQParser.PRINT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Print_stmt_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_stmt_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterPrint_stmt_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitPrint_stmt_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_stmt_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_stmt_baseContext print_stmt_base() {
		Print_stmt_baseContext _localctx = new Print_stmt_baseContext(Context, State);
		EnterRule(_localctx, 6, RULE_print_stmt_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(PRINT);
			State = 50; _localctx.arg = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_stmt_baseContext : ParserRuleContext {
		public IToken id_name;
		public ExprContext assignee;
		public ITerminalNode EQUALS() { return GetToken(BRAQParser.EQUALS, 0); }
		public ITerminalNode ID() { return GetToken(BRAQParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Assign_stmt_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_stmt_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterAssign_stmt_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitAssign_stmt_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_stmt_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_stmt_baseContext assign_stmt_base() {
		Assign_stmt_baseContext _localctx = new Assign_stmt_baseContext(Context, State);
		EnterRule(_localctx, 8, RULE_assign_stmt_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; _localctx.id_name = Match(ID);
			State = 53; Match(EQUALS);
			State = 54; _localctx.assignee = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Read_stmt_baseContext : ParserRuleContext {
		public Var_nodeContext arg;
		public ITerminalNode READ() { return GetToken(BRAQParser.READ, 0); }
		public Var_nodeContext var_node() {
			return GetRuleContext<Var_nodeContext>(0);
		}
		public Read_stmt_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read_stmt_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterRead_stmt_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitRead_stmt_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead_stmt_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Read_stmt_baseContext read_stmt_base() {
		Read_stmt_baseContext _localctx = new Read_stmt_baseContext(Context, State);
		EnterRule(_localctx, 10, RULE_read_stmt_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(READ);
			State = 57; _localctx.arg = var_node();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_def_baseContext : ParserRuleContext {
		public IToken fun_name;
		public Arg_listContext arguments;
		public ITerminalNode AT_OPERATOR() { return GetToken(BRAQParser.AT_OPERATOR, 0); }
		public ITerminalNode EQUALS() { return GetToken(BRAQParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(BRAQParser.ID, 0); }
		public Arg_listContext arg_list() {
			return GetRuleContext<Arg_listContext>(0);
		}
		public Function_def_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterFunction_def_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitFunction_def_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_def_baseContext function_def_base() {
		Function_def_baseContext _localctx = new Function_def_baseContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_def_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; _localctx.fun_name = Match(ID);
			State = 60; Match(AT_OPERATOR);
			State = 61; _localctx.arguments = arg_list();
			State = 62; Match(EQUALS);
			State = 63; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext left;
		public GroupContext grouping;
		public CallContext call_exr;
		public LiteralContext num;
		public IToken op;
		public ExprContext right;
		public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MODULUS() { return GetToken(BRAQParser.MODULUS, 0); }
		public ITerminalNode STAR() { return GetToken(BRAQParser.STAR, 0); }
		public ITerminalNode SLASH() { return GetToken(BRAQParser.SLASH, 0); }
		public ITerminalNode PLUS() { return GetToken(BRAQParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(BRAQParser.MINUS, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 66; _localctx.grouping = group();
				}
				break;
			case 2:
				{
				State = 67; _localctx.call_exr = call();
				}
				break;
			case 3:
				{
				State = 68; _localctx.num = literal();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 88;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 86;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 71;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 72; _localctx.op = Match(MODULUS);
						State = 73; _localctx.right = expr(9);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 74;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 75; _localctx.op = Match(STAR);
						State = 76; _localctx.right = expr(8);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 77;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 78; _localctx.op = Match(SLASH);
						State = 79; _localctx.right = expr(7);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 80;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 81; _localctx.op = Match(PLUS);
						State = 82; _localctx.right = expr(6);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 83;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 84; _localctx.op = Match(MINUS);
						State = 85; _localctx.right = expr(5);
						}
						break;
					}
					} 
				}
				State = 90;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		public ExprContext containing;
		public ITerminalNode LBRACKET() { return GetToken(BRAQParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(BRAQParser.RBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 16, RULE_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(LBRACKET);
			State = 92; _localctx.containing = expr(0);
			State = 93; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public IToken calee;
		public Arg_listContext arguments;
		public ITerminalNode AT_OPERATOR() { return GetToken(BRAQParser.AT_OPERATOR, 0); }
		public ITerminalNode ID() { return GetToken(BRAQParser.ID, 0); }
		public Arg_listContext arg_list() {
			return GetRuleContext<Arg_listContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 18, RULE_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; _localctx.calee = Match(ID);
			State = 96; Match(AT_OPERATOR);
			State = 97; _localctx.arguments = arg_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_listContext : ParserRuleContext {
		public ExprContext single_argument;
		public ExprContext expressions;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LBRACKET() { return GetToken(BRAQParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(BRAQParser.RBRACKET, 0); }
		public Arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterArg_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitArg_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_listContext arg_list() {
		Arg_listContext _localctx = new Arg_listContext(Context, State);
		EnterRule(_localctx, 20, RULE_arg_list);
		int _la;
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; _localctx.single_argument = expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100; Match(LBRACKET);
				{
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 101; _localctx.expressions = expr(0);
					}
					}
					State = 104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << LBRACKET) | (1L << STRING) | (1L << ID))) != 0) );
				}
				State = 106; Match(RBRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IToken num;
		public Var_nodeContext var_node_;
		public IToken str;
		public ITerminalNode NUMBER() { return GetToken(BRAQParser.NUMBER, 0); }
		public Var_nodeContext var_node() {
			return GetRuleContext<Var_nodeContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(BRAQParser.STRING, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 22, RULE_literal);
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; _localctx.num = Match(NUMBER);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; _localctx.var_node_ = var_node();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; _localctx.str = Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nodeContext : ParserRuleContext {
		public IToken id_name;
		public ITerminalNode ID() { return GetToken(BRAQParser.ID, 0); }
		public Var_nodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_node; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterVar_node(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitVar_node(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_node(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_nodeContext var_node() {
		Var_nodeContext _localctx = new Var_nodeContext(Context, State);
		EnterRule(_localctx, 24, RULE_var_node);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; _localctx.id_name = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x14', 'x', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\a', '\x2', '\x1E', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '!', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '*', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x32', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'H', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'Y', '\n', '\t', 
		'\f', '\t', '\xE', '\t', '\\', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x6', '\f', 'i', '\n', '\f', '\r', 
		'\f', '\xE', '\f', 'j', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'o', '\n', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 't', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x2', '\x3', '\x10', '\xF', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x2', '\x2', '\x2', '{', '\x2', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x4', ')', '\x3', '\x2', '\x2', '\x2', '\x6', '-', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x36', '\x3', '\x2', '\x2', '\x2', '\f', ':', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '=', '\x3', '\x2', '\x2', '\x2', '\x10', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x12', ']', '\x3', '\x2', '\x2', '\x2', '\x14', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x16', 'n', '\x3', '\x2', '\x2', '\x2', '\x18', 
		's', '\x3', '\x2', '\x2', '\x2', '\x1A', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x1E', '\x5', '\x4', '\x3', '\x2', '\x1D', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '!', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\"', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\a', '\x2', '\x2', '\x3', '#', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '$', '*', '\x5', '\x6', '\x4', '\x2', '%', '*', '\x5', '\b', '\x5', 
		'\x2', '&', '*', '\x5', '\n', '\x6', '\x2', '\'', '*', '\x5', '\f', '\a', 
		'\x2', '(', '*', '\x5', '\xE', '\b', '\x2', ')', '$', '\x3', '\x2', '\x2', 
		'\x2', ')', '%', '\x3', '\x2', '\x2', '\x2', ')', '&', '\x3', '\x2', '\x2', 
		'\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '\r', 
		'\x2', '\x2', ',', '\x5', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', 
		'\x10', '\x2', '\x2', '.', '\x31', '\a', '\x14', '\x2', '\x2', '/', '\x30', 
		'\a', '\x3', '\x2', '\x2', '\x30', '\x32', '\x5', '\x10', '\t', '\x2', 
		'\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\a', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', 
		'\a', '\x11', '\x2', '\x2', '\x34', '\x35', '\x5', '\x10', '\t', '\x2', 
		'\x35', '\t', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', '\x14', 
		'\x2', '\x2', '\x37', '\x38', '\a', '\x3', '\x2', '\x2', '\x38', '\x39', 
		'\x5', '\x10', '\t', '\x2', '\x39', '\v', '\x3', '\x2', '\x2', '\x2', 
		':', ';', '\a', '\x12', '\x2', '\x2', ';', '<', '\x5', '\x1A', '\xE', 
		'\x2', '<', '\r', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\x14', 
		'\x2', '\x2', '>', '?', '\a', '\t', '\x2', '\x2', '?', '@', '\x5', '\x16', 
		'\f', '\x2', '@', '\x41', '\a', '\x3', '\x2', '\x2', '\x41', '\x42', '\x5', 
		'\x10', '\t', '\x2', '\x42', '\xF', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\b', '\t', '\x1', '\x2', '\x44', 'H', '\x5', '\x12', '\n', '\x2', 
		'\x45', 'H', '\x5', '\x14', '\v', '\x2', '\x46', 'H', '\x5', '\x18', '\r', 
		'\x2', 'G', '\x43', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'Z', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'J', '\f', '\n', '\x2', '\x2', 'J', 'K', '\a', 
		'\b', '\x2', '\x2', 'K', 'Y', '\x5', '\x10', '\t', '\v', 'L', 'M', '\f', 
		'\t', '\x2', '\x2', 'M', 'N', '\a', '\x6', '\x2', '\x2', 'N', 'Y', '\x5', 
		'\x10', '\t', '\n', 'O', 'P', '\f', '\b', '\x2', '\x2', 'P', 'Q', '\a', 
		'\a', '\x2', '\x2', 'Q', 'Y', '\x5', '\x10', '\t', '\t', 'R', 'S', '\f', 
		'\a', '\x2', '\x2', 'S', 'T', '\a', '\x4', '\x2', '\x2', 'T', 'Y', '\x5', 
		'\x10', '\t', '\b', 'U', 'V', '\f', '\x6', '\x2', '\x2', 'V', 'W', '\a', 
		'\x5', '\x2', '\x2', 'W', 'Y', '\x5', '\x10', '\t', '\a', 'X', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'L', '\x3', '\x2', '\x2', '\x2', 'X', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'R', '\x3', '\x2', '\x2', '\x2', 'X', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'Y', '\\', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', 
		']', '^', '\a', '\v', '\x2', '\x2', '^', '_', '\x5', '\x10', '\t', '\x2', 
		'_', '`', '\a', '\f', '\x2', '\x2', '`', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x62', '\a', '\x14', '\x2', '\x2', '\x62', '\x63', '\a', 
		'\t', '\x2', '\x2', '\x63', '\x64', '\x5', '\x16', '\f', '\x2', '\x64', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x65', 'o', '\x5', '\x10', '\t', 
		'\x2', '\x66', 'h', '\a', '\v', '\x2', '\x2', 'g', 'i', '\x5', '\x10', 
		'\t', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', '\f', 
		'\x2', '\x2', 'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'n', '\x66', '\x3', '\x2', '\x2', '\x2', 'o', '\x17', 
		'\x3', '\x2', '\x2', '\x2', 'p', 't', '\a', '\n', '\x2', '\x2', 'q', 't', 
		'\x5', '\x1A', '\xE', '\x2', 'r', 't', '\a', '\x13', '\x2', '\x2', 's', 
		'p', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 
		's', 'r', '\x3', '\x2', '\x2', '\x2', 't', '\x19', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\a', '\x14', '\x2', '\x2', 'v', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\v', '\x1F', ')', '\x31', 'G', 'X', 'Z', 'j', 'n', 's',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
