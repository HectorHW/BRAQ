//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/hecto/RiderProjects/BRAQ/BRAQ_grammar\BRAQParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class BRAQParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQUALS=1, PLUS=2, MINUS=3, STAR=4, SLASH=5, MODULUS=6, AT_OPERATOR=7, 
		GR=8, GE=9, LS=10, LE=11, EQ=12, NE=13, AND=14, OR=15, XOR=16, NOT=17, 
		NUMBER=18, LBRACKET=19, RBRACKET=20, LCURLY=21, RCURLY=22, SEMICOLON=23, 
		NEWLINE=24, SPACE=25, VAR=26, PRINT=27, READ=28, IF=29, ELSE=30, STRING=31, 
		ID=32;
	public const int
		RULE_program = 0, RULE_block = 1, RULE_stmt = 2, RULE_if_stmt = 3, RULE_var_stmt_base = 4, 
		RULE_print_stmt_base = 5, RULE_assign_stmt_base = 6, RULE_read_stmt_base = 7, 
		RULE_expr = 8, RULE_group = 9, RULE_call = 10, RULE_arg_list = 11, RULE_literal = 12, 
		RULE_var_node = 13;
	public static readonly string[] ruleNames = {
		"program", "block", "stmt", "if_stmt", "var_stmt_base", "print_stmt_base", 
		"assign_stmt_base", "read_stmt_base", "expr", "group", "call", "arg_list", 
		"literal", "var_node"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'@'", "'>'", "'>='", 
		"'<'", "'<='", "'?='", "'!='", "'and'", "'or'", "'xor'", "'not'", null, 
		"'('", "')'", "'{'", "'}'", "';'", null, null, "'var'", "'print'", "'read'", 
		"'if'", "'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQUALS", "PLUS", "MINUS", "STAR", "SLASH", "MODULUS", "AT_OPERATOR", 
		"GR", "GE", "LS", "LE", "EQ", "NE", "AND", "OR", "XOR", "NOT", "NUMBER", 
		"LBRACKET", "RBRACKET", "LCURLY", "RCURLY", "SEMICOLON", "NEWLINE", "SPACE", 
		"VAR", "PRINT", "READ", "IF", "ELSE", "STRING", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BRAQParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BRAQParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BRAQParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BRAQParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(BRAQParser.Eof, 0); }
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << PRINT) | (1L << READ) | (1L << IF) | (1L << ID))) != 0)) {
				{
				{
				State = 28; stmt();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 34; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StmtContext containing;
		public ITerminalNode LCURLY() { return GetToken(BRAQParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(BRAQParser.RCURLY, 0); }
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(LCURLY);
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << PRINT) | (1L << READ) | (1L << IF) | (1L << ID))) != 0)) {
				{
				{
				State = 37; _localctx.containing = stmt();
				}
				}
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 43; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public Var_stmt_baseContext containing_var;
		public Print_stmt_baseContext containing_print;
		public Assign_stmt_baseContext containing_assign;
		public Read_stmt_baseContext containing_read;
		public If_stmtContext containing_if;
		public ITerminalNode SEMICOLON() { return GetToken(BRAQParser.SEMICOLON, 0); }
		public Var_stmt_baseContext var_stmt_base() {
			return GetRuleContext<Var_stmt_baseContext>(0);
		}
		public Print_stmt_baseContext print_stmt_base() {
			return GetRuleContext<Print_stmt_baseContext>(0);
		}
		public Assign_stmt_baseContext assign_stmt_base() {
			return GetRuleContext<Assign_stmt_baseContext>(0);
		}
		public Read_stmt_baseContext read_stmt_base() {
			return GetRuleContext<Read_stmt_baseContext>(0);
		}
		public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
			case PRINT:
			case READ:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 49;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VAR:
					{
					State = 45; _localctx.containing_var = var_stmt_base();
					}
					break;
				case PRINT:
					{
					State = 46; _localctx.containing_print = print_stmt_base();
					}
					break;
				case ID:
					{
					State = 47; _localctx.containing_assign = assign_stmt_base();
					}
					break;
				case READ:
					{
					State = 48; _localctx.containing_read = read_stmt_base();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 51; Match(SEMICOLON);
				}
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53; _localctx.containing_if = if_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		public ExprContext cond;
		public BlockContext then_branch;
		public BlockContext else_branch;
		public ITerminalNode IF() { return GetToken(BRAQParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(BRAQParser.ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(IF);
			State = 57; _localctx.cond = expr(0);
			State = 58; _localctx.then_branch = block();
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 59; Match(ELSE);
				State = 60; _localctx.else_branch = block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_stmt_baseContext : ParserRuleContext {
		public IToken id_name;
		public ExprContext assignee;
		public ITerminalNode VAR() { return GetToken(BRAQParser.VAR, 0); }
		public ITerminalNode ID() { return GetToken(BRAQParser.ID, 0); }
		public ITerminalNode EQUALS() { return GetToken(BRAQParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Var_stmt_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_stmt_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterVar_stmt_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitVar_stmt_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_stmt_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_stmt_baseContext var_stmt_base() {
		Var_stmt_baseContext _localctx = new Var_stmt_baseContext(Context, State);
		EnterRule(_localctx, 8, RULE_var_stmt_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(VAR);
			State = 64; _localctx.id_name = Match(ID);
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 65; Match(EQUALS);
				State = 66; _localctx.assignee = expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_stmt_baseContext : ParserRuleContext {
		public ExprContext arg;
		public ITerminalNode PRINT() { return GetToken(BRAQParser.PRINT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Print_stmt_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_stmt_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterPrint_stmt_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitPrint_stmt_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_stmt_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_stmt_baseContext print_stmt_base() {
		Print_stmt_baseContext _localctx = new Print_stmt_baseContext(Context, State);
		EnterRule(_localctx, 10, RULE_print_stmt_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(PRINT);
			State = 70; _localctx.arg = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_stmt_baseContext : ParserRuleContext {
		public IToken id_name;
		public ExprContext assignee;
		public ITerminalNode EQUALS() { return GetToken(BRAQParser.EQUALS, 0); }
		public ITerminalNode ID() { return GetToken(BRAQParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Assign_stmt_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_stmt_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterAssign_stmt_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitAssign_stmt_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_stmt_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_stmt_baseContext assign_stmt_base() {
		Assign_stmt_baseContext _localctx = new Assign_stmt_baseContext(Context, State);
		EnterRule(_localctx, 12, RULE_assign_stmt_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; _localctx.id_name = Match(ID);
			State = 73; Match(EQUALS);
			State = 74; _localctx.assignee = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Read_stmt_baseContext : ParserRuleContext {
		public Var_nodeContext arg;
		public ITerminalNode READ() { return GetToken(BRAQParser.READ, 0); }
		public Var_nodeContext var_node() {
			return GetRuleContext<Var_nodeContext>(0);
		}
		public Read_stmt_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read_stmt_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterRead_stmt_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitRead_stmt_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead_stmt_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Read_stmt_baseContext read_stmt_base() {
		Read_stmt_baseContext _localctx = new Read_stmt_baseContext(Context, State);
		EnterRule(_localctx, 14, RULE_read_stmt_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(READ);
			State = 77; _localctx.arg = var_node();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext left;
		public LiteralContext num;
		public CallContext call_exr;
		public GroupContext grouping;
		public IToken unary_not_op;
		public ExprContext right;
		public IToken op;
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(BRAQParser.NOT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MODULUS() { return GetToken(BRAQParser.MODULUS, 0); }
		public ITerminalNode STAR() { return GetToken(BRAQParser.STAR, 0); }
		public ITerminalNode SLASH() { return GetToken(BRAQParser.SLASH, 0); }
		public ITerminalNode PLUS() { return GetToken(BRAQParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(BRAQParser.MINUS, 0); }
		public ITerminalNode GR() { return GetToken(BRAQParser.GR, 0); }
		public ITerminalNode GE() { return GetToken(BRAQParser.GE, 0); }
		public ITerminalNode LS() { return GetToken(BRAQParser.LS, 0); }
		public ITerminalNode LE() { return GetToken(BRAQParser.LE, 0); }
		public ITerminalNode EQ() { return GetToken(BRAQParser.EQ, 0); }
		public ITerminalNode NE() { return GetToken(BRAQParser.NE, 0); }
		public ITerminalNode AND() { return GetToken(BRAQParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(BRAQParser.OR, 0); }
		public ITerminalNode XOR() { return GetToken(BRAQParser.XOR, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 80; _localctx.num = literal();
				}
				break;
			case 2:
				{
				State = 81; _localctx.call_exr = call();
				}
				break;
			case 3:
				{
				State = 82; _localctx.grouping = group();
				}
				break;
			case 4:
				{
				State = 83; _localctx.unary_not_op = Match(NOT);
				State = 84; _localctx.right = expr(4);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 113;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 111;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 87;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 88; _localctx.op = Match(MODULUS);
						State = 89; _localctx.right = expr(10);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 90;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 91;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==STAR || _la==SLASH) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 92; _localctx.right = expr(9);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 93;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 94;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 95; _localctx.right = expr(8);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 96;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 97;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GR) | (1L << GE) | (1L << LS) | (1L << LE))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 98; _localctx.right = expr(7);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 99;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 100;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQ || _la==NE) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 101; _localctx.right = expr(6);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 102;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 103; _localctx.op = Match(AND);
						State = 104; _localctx.right = expr(4);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 105;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 106; _localctx.op = Match(OR);
						State = 107; _localctx.right = expr(3);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 108;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 109; _localctx.op = Match(XOR);
						State = 110; _localctx.right = expr(2);
						}
						break;
					}
					} 
				}
				State = 115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		public ExprContext containing;
		public ITerminalNode LBRACKET() { return GetToken(BRAQParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(BRAQParser.RBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 18, RULE_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(LBRACKET);
			State = 117; _localctx.containing = expr(0);
			State = 118; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public IToken calee;
		public Arg_listContext arguments;
		public ITerminalNode AT_OPERATOR() { return GetToken(BRAQParser.AT_OPERATOR, 0); }
		public ITerminalNode ID() { return GetToken(BRAQParser.ID, 0); }
		public Arg_listContext arg_list() {
			return GetRuleContext<Arg_listContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 20, RULE_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; _localctx.calee = Match(ID);
			State = 121; Match(AT_OPERATOR);
			State = 122; _localctx.arguments = arg_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_listContext : ParserRuleContext {
		public LiteralContext single_argument;
		public ExprContext expressions;
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(BRAQParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(BRAQParser.RBRACKET, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterArg_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitArg_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_listContext arg_list() {
		Arg_listContext _localctx = new Arg_listContext(Context, State);
		EnterRule(_localctx, 22, RULE_arg_list);
		int _la;
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
			case STRING:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; _localctx.single_argument = literal();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; Match(LBRACKET);
				{
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOT) | (1L << NUMBER) | (1L << LBRACKET) | (1L << STRING) | (1L << ID))) != 0)) {
					{
					{
					State = 126; _localctx.expressions = expr(0);
					}
					}
					State = 131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 132; Match(RBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IToken num;
		public Var_nodeContext var_node_;
		public IToken str;
		public ITerminalNode NUMBER() { return GetToken(BRAQParser.NUMBER, 0); }
		public Var_nodeContext var_node() {
			return GetRuleContext<Var_nodeContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(BRAQParser.STRING, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 24, RULE_literal);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 135; _localctx.num = Match(NUMBER);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 136; _localctx.var_node_ = var_node();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 137; _localctx.str = Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nodeContext : ParserRuleContext {
		public IToken id_name;
		public ITerminalNode ID() { return GetToken(BRAQParser.ID, 0); }
		public Var_nodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_node; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterVar_node(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitVar_node(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_node(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_nodeContext var_node() {
		Var_nodeContext _localctx = new Var_nodeContext(Context, State);
		EnterRule(_localctx, 26, RULE_var_node);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; _localctx.id_name = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\x91', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\a', '\x2', ' ', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '#', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', ')', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', ',', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x34', 
		'\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x39', 
		'\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '@', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x46', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'X', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', 'r', '\n', '\n', '\f', '\n', '\xE', 
		'\n', 'u', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\a', '\r', '\x82', '\n', '\r', '\f', '\r', '\xE', 
		'\r', '\x85', '\v', '\r', '\x3', '\r', '\x5', '\r', '\x88', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x8D', '\n', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x2', '\x3', '\x12', 
		'\x10', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', '\x6', '\x3', '\x2', '\x6', 
		'\a', '\x3', '\x2', '\x4', '\x5', '\x3', '\x2', '\n', '\r', '\x3', '\x2', 
		'\xE', '\xF', '\x2', '\x99', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'&', '\x3', '\x2', '\x2', '\x2', '\x6', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\b', ':', '\x3', '\x2', '\x2', '\x2', '\n', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'G', '\x3', '\x2', '\x2', '\x2', '\xE', 'J', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'N', '\x3', '\x2', '\x2', '\x2', '\x12', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'v', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x18', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', ' ', '\x5', '\x6', '\x4', '\x2', '\x1F', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', 
		'!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\a', '\x2', '\x2', '\x3', '%', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '&', '*', '\a', '\x17', '\x2', '\x2', '\'', ')', 
		'\x5', '\x6', '\x4', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', ')', 
		',', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', 
		'*', '+', '\x3', '\x2', '\x2', '\x2', '+', '-', '\x3', '\x2', '\x2', '\x2', 
		',', '*', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', '\x18', '\x2', '\x2', 
		'.', '\x5', '\x3', '\x2', '\x2', '\x2', '/', '\x34', '\x5', '\n', '\x6', 
		'\x2', '\x30', '\x34', '\x5', '\f', '\a', '\x2', '\x31', '\x34', '\x5', 
		'\xE', '\b', '\x2', '\x32', '\x34', '\x5', '\x10', '\t', '\x2', '\x33', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x33', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\a', '\x19', '\x2', '\x2', '\x36', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x39', '\x5', '\b', '\x5', '\x2', '\x38', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'\a', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\x1F', '\x2', '\x2', 
		';', '<', '\x5', '\x12', '\n', '\x2', '<', '?', '\x5', '\x4', '\x3', '\x2', 
		'=', '>', '\a', ' ', '\x2', '\x2', '>', '@', '\x5', '\x4', '\x3', '\x2', 
		'?', '=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', 
		'@', '\t', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x1C', '\x2', 
		'\x2', '\x42', '\x45', '\a', '\"', '\x2', '\x2', '\x43', '\x44', '\a', 
		'\x3', '\x2', '\x2', '\x44', '\x46', '\x5', '\x12', '\n', '\x2', '\x45', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\v', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\x1D', 
		'\x2', '\x2', 'H', 'I', '\x5', '\x12', '\n', '\x2', 'I', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\a', '\"', '\x2', '\x2', 'K', 'L', '\a', 
		'\x3', '\x2', '\x2', 'L', 'M', '\x5', '\x12', '\n', '\x2', 'M', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\x1E', '\x2', '\x2', 'O', 
		'P', '\x5', '\x1C', '\xF', '\x2', 'P', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\b', '\n', '\x1', '\x2', 'R', 'X', '\x5', '\x1A', '\xE', '\x2', 
		'S', 'X', '\x5', '\x16', '\f', '\x2', 'T', 'X', '\x5', '\x14', '\v', '\x2', 
		'U', 'V', '\a', '\x13', '\x2', '\x2', 'V', 'X', '\x5', '\x12', '\n', '\x6', 
		'W', 'Q', '\x3', '\x2', '\x2', '\x2', 'W', 'S', '\x3', '\x2', '\x2', '\x2', 
		'W', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 
		'X', 's', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\f', '\v', '\x2', '\x2', 
		'Z', '[', '\a', '\b', '\x2', '\x2', '[', 'r', '\x5', '\x12', '\n', '\f', 
		'\\', ']', '\f', '\n', '\x2', '\x2', ']', '^', '\t', '\x2', '\x2', '\x2', 
		'^', 'r', '\x5', '\x12', '\n', '\v', '_', '`', '\f', '\t', '\x2', '\x2', 
		'`', '\x61', '\t', '\x3', '\x2', '\x2', '\x61', 'r', '\x5', '\x12', '\n', 
		'\n', '\x62', '\x63', '\f', '\b', '\x2', '\x2', '\x63', '\x64', '\t', 
		'\x4', '\x2', '\x2', '\x64', 'r', '\x5', '\x12', '\n', '\t', '\x65', '\x66', 
		'\f', '\a', '\x2', '\x2', '\x66', 'g', '\t', '\x5', '\x2', '\x2', 'g', 
		'r', '\x5', '\x12', '\n', '\b', 'h', 'i', '\f', '\x5', '\x2', '\x2', 'i', 
		'j', '\a', '\x10', '\x2', '\x2', 'j', 'r', '\x5', '\x12', '\n', '\x6', 
		'k', 'l', '\f', '\x4', '\x2', '\x2', 'l', 'm', '\a', '\x11', '\x2', '\x2', 
		'm', 'r', '\x5', '\x12', '\n', '\x5', 'n', 'o', '\f', '\x3', '\x2', '\x2', 
		'o', 'p', '\a', '\x12', '\x2', '\x2', 'p', 'r', '\x5', '\x12', '\n', '\x4', 
		'q', 'Y', '\x3', '\x2', '\x2', '\x2', 'q', '\\', '\x3', '\x2', '\x2', 
		'\x2', 'q', '_', '\x3', '\x2', '\x2', '\x2', 'q', '\x62', '\x3', '\x2', 
		'\x2', '\x2', 'q', '\x65', '\x3', '\x2', '\x2', '\x2', 'q', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'k', '\x3', '\x2', '\x2', '\x2', 'q', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'r', 'u', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', 
		'\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', '\x13', 
		'\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'v', 
		'w', '\a', '\x15', '\x2', '\x2', 'w', 'x', '\x5', '\x12', '\n', '\x2', 
		'x', 'y', '\a', '\x16', '\x2', '\x2', 'y', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\a', '\"', '\x2', '\x2', '{', '|', '\a', '\t', '\x2', 
		'\x2', '|', '}', '\x5', '\x18', '\r', '\x2', '}', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x88', '\x5', '\x1A', '\xE', '\x2', '\x7F', '\x83', 
		'\a', '\x15', '\x2', '\x2', '\x80', '\x82', '\x5', '\x12', '\n', '\x2', 
		'\x81', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x86', '\x88', '\a', '\x16', 
		'\x2', '\x2', '\x87', '~', '\x3', '\x2', '\x2', '\x2', '\x87', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x8D', '\a', '\x14', '\x2', '\x2', '\x8A', '\x8D', '\x5', '\x1C', 
		'\xF', '\x2', '\x8B', '\x8D', '\a', '!', '\x2', '\x2', '\x8C', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8F', '\a', '\"', '\x2', '\x2', '\x8F', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '!', '*', '\x33', '\x38', '?', '\x45', 
		'W', 'q', 's', '\x83', '\x87', '\x8C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
