//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/hecto/RiderProjects/BRAQ/BRAQ_grammar\BRAQParser.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class BRAQParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQUALS=1, PLUS=2, MINUS=3, STAR=4, SLASH=5, MODULUS=6, AT_OPERATOR=7, 
		GR=8, GE=9, LS=10, LE=11, EQ=12, NE=13, AND=14, OR=15, XOR=16, NOT=17, 
		NUMBER=18, DOUBLE_NUMBER=19, LBRACKET=20, RBRACKET=21, LCURLY=22, RCURLY=23, 
		SEMICOLON=24, COLON=25, DOT=26, NEWLINE=27, SPACE=28, VAR=29, RETURN=30, 
		BREAK=31, CONTINUE=32, WHILE=33, FOR=34, DEF=35, IMPORT=36, IF=37, ELSE=38, 
		STRING=39, ID=40;
	public const int
		RULE_program = 0, RULE_imports = 1, RULE_block = 2, RULE_stmt = 3, RULE_if_stmt = 4, 
		RULE_while_loop_stmt = 5, RULE_function_def_stmt = 6, RULE_typed_id = 7, 
		RULE_break_stmt = 8, RULE_continue_stmt = 9, RULE_return_stmt = 10, RULE_var_stmt = 11, 
		RULE_expr_stmt = 12, RULE_assign = 13, RULE_expr = 14, RULE_logical_or = 15, 
		RULE_logical_xor = 16, RULE_logical_and = 17, RULE_logical_equal = 18, 
		RULE_logical_gr_le = 19, RULE_addition = 20, RULE_multiplication = 21, 
		RULE_unary_not_neg = 22, RULE_dot_notation = 23, RULE_call = 24, RULE_short_call = 25, 
		RULE_literal = 26, RULE_group = 27, RULE_var_node = 28;
	public static readonly string[] ruleNames = {
		"program", "imports", "block", "stmt", "if_stmt", "while_loop_stmt", "function_def_stmt", 
		"typed_id", "break_stmt", "continue_stmt", "return_stmt", "var_stmt", 
		"expr_stmt", "assign", "expr", "logical_or", "logical_xor", "logical_and", 
		"logical_equal", "logical_gr_le", "addition", "multiplication", "unary_not_neg", 
		"dot_notation", "call", "short_call", "literal", "group", "var_node"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'@'", "'>'", "'>='", 
		"'<'", "'<='", "'?='", "'!='", "'and'", "'or'", "'xor'", "'not'", null, 
		null, "'('", "')'", "'{'", "'}'", "';'", "':'", "'.'", null, null, "'var'", 
		"'return'", "'break'", "'continue'", "'while'", "'for'", "'def'", "'import'", 
		"'if'", "'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQUALS", "PLUS", "MINUS", "STAR", "SLASH", "MODULUS", "AT_OPERATOR", 
		"GR", "GE", "LS", "LE", "EQ", "NE", "AND", "OR", "XOR", "NOT", "NUMBER", 
		"DOUBLE_NUMBER", "LBRACKET", "RBRACKET", "LCURLY", "RCURLY", "SEMICOLON", 
		"COLON", "DOT", "NEWLINE", "SPACE", "VAR", "RETURN", "BREAK", "CONTINUE", 
		"WHILE", "FOR", "DEF", "IMPORT", "IF", "ELSE", "STRING", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BRAQParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BRAQParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BRAQParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BRAQParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ImportsContext import_block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BRAQParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext[] imports() {
			return GetRuleContexts<ImportsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext imports(int i) {
			return GetRuleContext<ImportsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_def_stmtContext[] function_def_stmt() {
			return GetRuleContexts<Function_def_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_def_stmtContext function_def_stmt(int i) {
			return GetRuleContext<Function_def_stmtContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 58; _localctx.import_block = imports();
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEF) {
				{
				{
				State = 64; function_def_stmt();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 70; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportsContext : ParserRuleContext {
		public Dot_notationContext containing;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(BRAQParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BRAQParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dot_notationContext dot_notation() {
			return GetRuleContext<Dot_notationContext>(0);
		}
		public ImportsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imports; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterImports(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitImports(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImports(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportsContext imports() {
		ImportsContext _localctx = new ImportsContext(Context, State);
		EnterRule(_localctx, 2, RULE_imports);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(IMPORT);
			State = 73; _localctx.containing = dot_notation(0);
			State = 74; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StmtContext containing;
		public StmtContext single_stmt;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(BRAQParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(BRAQParser.RCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76; Match(LCURLY);
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << NOT) | (1L << NUMBER) | (1L << DOUBLE_NUMBER) | (1L << LBRACKET) | (1L << VAR) | (1L << RETURN) | (1L << BREAK) | (1L << CONTINUE) | (1L << WHILE) | (1L << DEF) | (1L << IF) | (1L << STRING) | (1L << ID))) != 0)) {
					{
					{
					State = 77; _localctx.containing = stmt();
					}
					}
					State = 82;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 83; Match(RCURLY);
				}
				break;
			case MINUS:
			case NOT:
			case NUMBER:
			case DOUBLE_NUMBER:
			case LBRACKET:
			case VAR:
			case RETURN:
			case BREAK:
			case CONTINUE:
			case WHILE:
			case DEF:
			case IF:
			case STRING:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; _localctx.single_stmt = stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public If_stmtContext containing_if;
		public Function_def_stmtContext containing_def;
		[System.Diagnostics.DebuggerNonUserCode] public Var_stmtContext var_stmt() {
			return GetRuleContext<Var_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_stmtContext expr_stmt() {
			return GetRuleContext<Expr_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_loop_stmtContext while_loop_stmt() {
			return GetRuleContext<While_loop_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Break_stmtContext break_stmt() {
			return GetRuleContext<Break_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Continue_stmtContext continue_stmt() {
			return GetRuleContext<Continue_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_stmtContext return_stmt() {
			return GetRuleContext<Return_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_def_stmtContext function_def_stmt() {
			return GetRuleContext<Function_def_stmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmt);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; var_stmt();
				}
				break;
			case MINUS:
			case NOT:
			case NUMBER:
			case DOUBLE_NUMBER:
			case LBRACKET:
			case STRING:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; expr_stmt();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89; _localctx.containing_if = if_stmt();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 90; while_loop_stmt();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 91; break_stmt();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 92; continue_stmt();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 93; return_stmt();
				}
				break;
			case DEF:
				EnterOuterAlt(_localctx, 8);
				{
				State = 94; _localctx.containing_def = function_def_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		public ExprContext cond;
		public BlockContext then_branch;
		public BlockContext else_branch;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BRAQParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BRAQParser.ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_if_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(IF);
			State = 98; _localctx.cond = expr();
			State = 99; _localctx.then_branch = block();
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 100; Match(ELSE);
				State = 101; _localctx.else_branch = block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loop_stmtContext : ParserRuleContext {
		public Logical_orContext cond;
		public BlockContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BRAQParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_orContext logical_or() {
			return GetRuleContext<Logical_orContext>(0);
		}
		public While_loop_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterWhile_loop_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitWhile_loop_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_loop_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_loop_stmtContext while_loop_stmt() {
		While_loop_stmtContext _localctx = new While_loop_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_while_loop_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(WHILE);
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 105; _localctx.cond = logical_or(0);
				}
				break;
			}
			State = 108; _localctx.body = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_def_stmtContext : ParserRuleContext {
		public IToken id_name;
		public IToken of_type;
		public BlockContext function_body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(BRAQParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(BRAQParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(BRAQParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(BRAQParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(BRAQParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BRAQParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Typed_idContext[] typed_id() {
			return GetRuleContexts<Typed_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typed_idContext typed_id(int i) {
			return GetRuleContext<Typed_idContext>(i);
		}
		public Function_def_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterFunction_def_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitFunction_def_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_def_stmtContext function_def_stmt() {
		Function_def_stmtContext _localctx = new Function_def_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_def_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(DEF);
			State = 111; _localctx.id_name = Match(ID);
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 112; Match(LBRACKET);
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 113; typed_id();
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 119; Match(RBRACKET);
				}
				break;
			}
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 122; Match(COLON);
				State = 123; _localctx.of_type = Match(ID);
				}
			}

			State = 126; _localctx.function_body = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_idContext : ParserRuleContext {
		public IToken id_name;
		public IToken type_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BRAQParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(BRAQParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(BRAQParser.ID, i);
		}
		public Typed_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterTyped_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitTyped_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyped_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typed_idContext typed_id() {
		Typed_idContext _localctx = new Typed_idContext(Context, State);
		EnterRule(_localctx, 14, RULE_typed_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; _localctx.id_name = Match(ID);
			State = 129; Match(COLON);
			State = 130; _localctx.type_name = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(BRAQParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BRAQParser.SEMICOLON, 0); }
		public Break_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterBreak_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitBreak_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_stmtContext break_stmt() {
		Break_stmtContext _localctx = new Break_stmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_break_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(BREAK);
			State = 133; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(BRAQParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BRAQParser.SEMICOLON, 0); }
		public Continue_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterContinue_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitContinue_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Continue_stmtContext continue_stmt() {
		Continue_stmtContext _localctx = new Continue_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_continue_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(CONTINUE);
			State = 136; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_stmtContext : ParserRuleContext {
		public ExprContext return_value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BRAQParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BRAQParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Return_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterReturn_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitReturn_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_stmtContext return_stmt() {
		Return_stmtContext _localctx = new Return_stmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_return_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(RETURN);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << NOT) | (1L << NUMBER) | (1L << DOUBLE_NUMBER) | (1L << LBRACKET) | (1L << STRING) | (1L << ID))) != 0)) {
				{
				State = 139; _localctx.return_value = expr();
				}
			}

			State = 142; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_stmtContext : ParserRuleContext {
		public IToken id_name;
		public ExprContext assignee;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BRAQParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BRAQParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BRAQParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(BRAQParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Var_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterVar_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitVar_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_stmtContext var_stmt() {
		Var_stmtContext _localctx = new Var_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_var_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(VAR);
			State = 145; _localctx.id_name = Match(ID);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 146; Match(EQUALS);
				State = 147; _localctx.assignee = expr();
				}
			}

			State = 150; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_stmtContext : ParserRuleContext {
		public AssignContext containing;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BRAQParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public Expr_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterExpr_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitExpr_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_stmtContext expr_stmt() {
		Expr_stmtContext _localctx = new Expr_stmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_expr_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; _localctx.containing = assign();
			State = 153; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public IToken id_name;
		public ExprContext assignee;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(BRAQParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BRAQParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 26, RULE_assign);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155; _localctx.id_name = Match(ID);
				State = 156; Match(EQUALS);
				State = 157; _localctx.assignee = expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; _localctx.assignee = expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public Logical_orContext containing;
		[System.Diagnostics.DebuggerNonUserCode] public Logical_orContext logical_or() {
			return GetRuleContext<Logical_orContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; _localctx.containing = logical_or(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_orContext : ParserRuleContext {
		public Logical_orContext left;
		public Logical_xorContext right;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Logical_xorContext logical_xor() {
			return GetRuleContext<Logical_xorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_orContext logical_or() {
			return GetRuleContext<Logical_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BRAQParser.OR, 0); }
		public Logical_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterLogical_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitLogical_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_orContext logical_or() {
		return logical_or(0);
	}

	private Logical_orContext logical_or(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_orContext _localctx = new Logical_orContext(Context, _parentState);
		Logical_orContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_logical_or, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 164; _localctx.right = logical_xor(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 171;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_orContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logical_or);
					State = 166;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 167; _localctx.op = Match(OR);
					State = 168; _localctx.right = logical_xor(0);
					}
					} 
				}
				State = 173;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_xorContext : ParserRuleContext {
		public Logical_xorContext left;
		public Logical_andContext right;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Logical_andContext logical_and() {
			return GetRuleContext<Logical_andContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_xorContext logical_xor() {
			return GetRuleContext<Logical_xorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(BRAQParser.XOR, 0); }
		public Logical_xorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_xor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterLogical_xor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitLogical_xor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_xor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_xorContext logical_xor() {
		return logical_xor(0);
	}

	private Logical_xorContext logical_xor(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_xorContext _localctx = new Logical_xorContext(Context, _parentState);
		Logical_xorContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_logical_xor, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 175; _localctx.right = logical_and(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 182;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_xorContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logical_xor);
					State = 177;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 178; _localctx.op = Match(XOR);
					State = 179; _localctx.right = logical_and(0);
					}
					} 
				}
				State = 184;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_andContext : ParserRuleContext {
		public Logical_andContext left;
		public Logical_equalContext right;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Logical_equalContext logical_equal() {
			return GetRuleContext<Logical_equalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_andContext logical_and() {
			return GetRuleContext<Logical_andContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(BRAQParser.AND, 0); }
		public Logical_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterLogical_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitLogical_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_andContext logical_and() {
		return logical_and(0);
	}

	private Logical_andContext logical_and(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_andContext _localctx = new Logical_andContext(Context, _parentState);
		Logical_andContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_logical_and, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 186; _localctx.right = logical_equal(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 193;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_andContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logical_and);
					State = 188;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 189; _localctx.op = Match(AND);
					State = 190; _localctx.right = logical_equal(0);
					}
					} 
				}
				State = 195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_equalContext : ParserRuleContext {
		public Logical_equalContext left;
		public Logical_gr_leContext right;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Logical_gr_leContext logical_gr_le() {
			return GetRuleContext<Logical_gr_leContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_equalContext logical_equal() {
			return GetRuleContext<Logical_equalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BRAQParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(BRAQParser.NE, 0); }
		public Logical_equalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_equal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterLogical_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitLogical_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_equal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_equalContext logical_equal() {
		return logical_equal(0);
	}

	private Logical_equalContext logical_equal(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_equalContext _localctx = new Logical_equalContext(Context, _parentState);
		Logical_equalContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_logical_equal, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 197; _localctx.right = logical_gr_le();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 204;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_equalContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logical_equal);
					State = 199;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 200;
					_localctx.op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==EQ || _la==NE) ) {
						_localctx.op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 201; _localctx.right = logical_gr_le();
					}
					} 
				}
				State = 206;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_gr_leContext : ParserRuleContext {
		public AdditionContext left;
		public IToken op;
		public AdditionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public AdditionContext[] addition() {
			return GetRuleContexts<AdditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionContext addition(int i) {
			return GetRuleContext<AdditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GR() { return GetToken(BRAQParser.GR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(BRAQParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LS() { return GetToken(BRAQParser.LS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(BRAQParser.LE, 0); }
		public Logical_gr_leContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_gr_le; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterLogical_gr_le(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitLogical_gr_le(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_gr_le(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_gr_leContext logical_gr_le() {
		Logical_gr_leContext _localctx = new Logical_gr_leContext(Context, State);
		EnterRule(_localctx, 38, RULE_logical_gr_le);
		int _la;
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207; _localctx.left = addition(0);
				State = 208;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GR) | (1L << GE) | (1L << LS) | (1L << LE))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 209; _localctx.right = addition(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211; _localctx.right = addition(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionContext : ParserRuleContext {
		public AdditionContext left;
		public MultiplicationContext right;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationContext multiplication() {
			return GetRuleContext<MultiplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionContext addition() {
			return GetRuleContext<AdditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BRAQParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BRAQParser.MINUS, 0); }
		public AdditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionContext addition() {
		return addition(0);
	}

	private AdditionContext addition(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditionContext _localctx = new AdditionContext(Context, _parentState);
		AdditionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_addition, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 215; _localctx.right = multiplication(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 222;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AdditionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_addition);
					State = 217;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 218;
					_localctx.op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
						_localctx.op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 219; _localctx.right = multiplication(0);
					}
					} 
				}
				State = 224;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicationContext : ParserRuleContext {
		public MultiplicationContext left;
		public Unary_not_negContext right;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Unary_not_negContext unary_not_neg() {
			return GetRuleContext<Unary_not_negContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationContext multiplication() {
			return GetRuleContext<MultiplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BRAQParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(BRAQParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULUS() { return GetToken(BRAQParser.MODULUS, 0); }
		public MultiplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationContext multiplication() {
		return multiplication(0);
	}

	private MultiplicationContext multiplication(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicationContext _localctx = new MultiplicationContext(Context, _parentState);
		MultiplicationContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_multiplication, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 226; _localctx.right = unary_not_neg();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultiplicationContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_multiplication);
					State = 228;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 229;
					_localctx.op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << MODULUS))) != 0)) ) {
						_localctx.op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 230; _localctx.right = unary_not_neg();
					}
					} 
				}
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unary_not_negContext : ParserRuleContext {
		public IToken op;
		public Dot_notationContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Dot_notationContext dot_notation() {
			return GetRuleContext<Dot_notationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(BRAQParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BRAQParser.MINUS, 0); }
		public Unary_not_negContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_not_neg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterUnary_not_neg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitUnary_not_neg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_not_neg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_not_negContext unary_not_neg() {
		Unary_not_negContext _localctx = new Unary_not_negContext(Context, State);
		EnterRule(_localctx, 44, RULE_unary_not_neg);
		int _la;
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MINUS || _la==NOT) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 237; _localctx.right = dot_notation(0);
				}
				break;
			case NUMBER:
			case DOUBLE_NUMBER:
			case LBRACKET:
			case STRING:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238; _localctx.right = dot_notation(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dot_notationContext : ParserRuleContext {
		public Dot_notationContext basee;
		public CallContext single_name;
		public CallContext target;
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dot_notationContext dot_notation() {
			return GetRuleContext<Dot_notationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BRAQParser.DOT, 0); }
		public Dot_notationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dot_notation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterDot_notation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitDot_notation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDot_notation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dot_notationContext dot_notation() {
		return dot_notation(0);
	}

	private Dot_notationContext dot_notation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Dot_notationContext _localctx = new Dot_notationContext(Context, _parentState);
		Dot_notationContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_dot_notation, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 242; _localctx.single_name = call();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 249;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Dot_notationContext(_parentctx, _parentState);
					_localctx.basee = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_dot_notation);
					State = 244;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					{
					State = 245; Match(DOT);
					State = 246; _localctx.target = call();
					}
					}
					} 
				}
				State = 251;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public IToken calee;
		public Short_callContext single;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(BRAQParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(BRAQParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BRAQParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Short_callContext short_call() {
			return GetRuleContext<Short_callContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 48, RULE_call);
		int _la;
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 252; _localctx.calee = Match(ID);
				State = 253; Match(LBRACKET);
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << NOT) | (1L << NUMBER) | (1L << DOUBLE_NUMBER) | (1L << LBRACKET) | (1L << STRING) | (1L << ID))) != 0)) {
					{
					{
					State = 254; expr();
					}
					}
					State = 259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 260; Match(RBRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261; _localctx.single = short_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Short_callContext : ParserRuleContext {
		public IToken calee;
		public Dot_notationContext arg;
		public LiteralContext single;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_OPERATOR() { return GetToken(BRAQParser.AT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BRAQParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dot_notationContext dot_notation() {
			return GetRuleContext<Dot_notationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Short_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_short_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterShort_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitShort_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShort_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Short_callContext short_call() {
		Short_callContext _localctx = new Short_callContext(Context, State);
		EnterRule(_localctx, 50, RULE_short_call);
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264; _localctx.calee = Match(ID);
				State = 265; Match(AT_OPERATOR);
				{
				State = 266; _localctx.arg = dot_notation(0);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 267; _localctx.single = literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IToken num;
		public IToken double_num;
		public Var_nodeContext var_node_;
		public IToken str;
		public GroupContext containing_group;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(BRAQParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_NUMBER() { return GetToken(BRAQParser.DOUBLE_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_nodeContext var_node() {
			return GetRuleContext<Var_nodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BRAQParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 52, RULE_literal);
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270; _localctx.num = Match(NUMBER);
				}
				break;
			case DOUBLE_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271; _localctx.double_num = Match(DOUBLE_NUMBER);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 272; _localctx.var_node_ = var_node();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 273; _localctx.str = Match(STRING);
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 274; _localctx.containing_group = group();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		public ExprContext containing;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(BRAQParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(BRAQParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 54, RULE_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(LBRACKET);
			State = 278; _localctx.containing = expr();
			State = 279; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nodeContext : ParserRuleContext {
		public IToken id_name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BRAQParser.ID, 0); }
		public Var_nodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_node; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.EnterVar_node(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBRAQParserListener typedListener = listener as IBRAQParserListener;
			if (typedListener != null) typedListener.ExitVar_node(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRAQParserVisitor<TResult> typedVisitor = visitor as IBRAQParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_node(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_nodeContext var_node() {
		Var_nodeContext _localctx = new Var_nodeContext(Context, State);
		EnterRule(_localctx, 56, RULE_var_node);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; _localctx.id_name = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return logical_or_sempred((Logical_orContext)_localctx, predIndex);
		case 16: return logical_xor_sempred((Logical_xorContext)_localctx, predIndex);
		case 17: return logical_and_sempred((Logical_andContext)_localctx, predIndex);
		case 18: return logical_equal_sempred((Logical_equalContext)_localctx, predIndex);
		case 20: return addition_sempred((AdditionContext)_localctx, predIndex);
		case 21: return multiplication_sempred((MultiplicationContext)_localctx, predIndex);
		case 23: return dot_notation_sempred((Dot_notationContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logical_or_sempred(Logical_orContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool logical_xor_sempred(Logical_xorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool logical_and_sempred(Logical_andContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool logical_equal_sempred(Logical_equalContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool addition_sempred(AdditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multiplication_sempred(MultiplicationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		}
		return true;
	}
	private bool dot_notation_sempred(Dot_notationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\x11E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x3', '\x2', '\a', '\x2', '>', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x41', '\v', '\x2', '\x3', '\x2', '\a', 
		'\x2', '\x44', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'G', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'Q', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', 'T', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', 'X', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x62', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'i', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'm', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'u', '\n', 
		'\b', '\f', '\b', '\xE', '\b', 'x', '\v', '\b', '\x3', '\b', '\x5', '\b', 
		'{', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x7F', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x8F', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\x97', '\n', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xA2', '\n', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xAC', '\n', '\x11', 
		'\f', '\x11', '\xE', '\x11', '\xAF', '\v', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\xB7', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xBA', '\v', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\a', '\x13', '\xC2', '\n', '\x13', '\f', '\x13', 
		'\xE', '\x13', '\xC5', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xCD', 
		'\n', '\x14', '\f', '\x14', '\xE', '\x14', '\xD0', '\v', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\xD7', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\xDF', '\n', 
		'\x16', '\f', '\x16', '\xE', '\x16', '\xE2', '\v', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\a', '\x17', '\xEA', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xED', 
		'\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\xF2', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\xFA', '\n', '\x19', 
		'\f', '\x19', '\xE', '\x19', '\xFD', '\v', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\a', '\x1A', '\x102', '\n', '\x1A', '\f', '\x1A', 
		'\xE', '\x1A', '\x105', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x109', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x10F', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x116', 
		'\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x2', '\t', ' ', '\"', '$', 
		'&', '*', ',', '\x30', '\x1F', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '\x2', '\a', '\x3', '\x2', '\xE', '\xF', '\x3', '\x2', '\n', 
		'\r', '\x3', '\x2', '\x4', '\x5', '\x3', '\x2', '\x6', '\b', '\x4', '\x2', 
		'\x5', '\x5', '\x13', '\x13', '\x2', '\x123', '\x2', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x4', 'J', '\x3', '\x2', '\x2', '\x2', '\x6', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x61', '\x3', '\x2', '\x2', '\x2', '\n', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'j', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'p', '\x3', '\x2', '\x2', '\x2', '\x10', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x86', '\x3', '\x2', '\x2', '\x2', '\x14', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xA5', '\x3', '\x2', '\x2', '\x2', '\"', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xBB', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '(', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xD8', '\x3', '\x2', '\x2', '\x2', ',', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x30', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x36', '\x115', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x117', '\x3', '\x2', '\x2', '\x2', ':', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '<', '>', '\x5', '\x4', '\x3', '\x2', '=', 
		'<', '\x3', '\x2', '\x2', '\x2', '>', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'?', '=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x45', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x44', '\x5', '\xE', '\b', '\x2', '\x43', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x44', 'G', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'H', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\a', '\x2', '\x2', '\x3', 'I', '\x3', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\a', '&', '\x2', '\x2', 'K', 'L', '\x5', 
		'\x30', '\x19', '\x2', 'L', 'M', '\a', '\x1A', '\x2', '\x2', 'M', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'R', '\a', '\x18', '\x2', '\x2', 'O', 
		'Q', '\x5', '\b', '\x5', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'T', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\x3', '\x2', '\x2', '\x2', 
		'T', 'R', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\a', '\x19', '\x2', '\x2', 
		'V', 'X', '\x5', '\b', '\x5', '\x2', 'W', 'N', '\x3', '\x2', '\x2', '\x2', 
		'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'Y', '\x62', '\x5', '\x18', '\r', '\x2', 'Z', '\x62', '\x5', '\x1A', 
		'\xE', '\x2', '[', '\x62', '\x5', '\n', '\x6', '\x2', '\\', '\x62', '\x5', 
		'\f', '\a', '\x2', ']', '\x62', '\x5', '\x12', '\n', '\x2', '^', '\x62', 
		'\x5', '\x14', '\v', '\x2', '_', '\x62', '\x5', '\x16', '\f', '\x2', '`', 
		'\x62', '\x5', '\xE', '\b', '\x2', '\x61', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x61', 'Z', '\x3', '\x2', '\x2', '\x2', '\x61', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\\', '\x3', '\x2', '\x2', '\x2', '\x61', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '^', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\a', '\'', '\x2', '\x2', 
		'\x64', '\x65', '\x5', '\x1E', '\x10', '\x2', '\x65', 'h', '\x5', '\x6', 
		'\x4', '\x2', '\x66', 'g', '\a', '(', '\x2', '\x2', 'g', 'i', '\x5', '\x6', 
		'\x4', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', 
		'\x2', '\x2', '\x2', 'i', '\v', '\x3', '\x2', '\x2', '\x2', 'j', 'l', 
		'\a', '#', '\x2', '\x2', 'k', 'm', '\x5', ' ', '\x11', '\x2', 'l', 'k', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 
		'n', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x5', '\x6', '\x4', '\x2', 
		'o', '\r', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '%', '\x2', '\x2', 
		'q', 'z', '\a', '*', '\x2', '\x2', 'r', 'v', '\a', '\x16', '\x2', '\x2', 
		's', 'u', '\x5', '\x10', '\t', '\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 
		'u', 'x', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\x3', '\x2', '\x2', '\x2', 
		'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', '{', '\a', '\x17', '\x2', '\x2', 
		'z', 'r', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', 
		'{', '~', '\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '\x1B', '\x2', '\x2', 
		'}', '\x7F', '\a', '*', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x81', '\x5', '\x6', '\x4', '\x2', '\x81', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\a', '*', '\x2', '\x2', '\x83', 
		'\x84', '\a', '\x1B', '\x2', '\x2', '\x84', '\x85', '\a', '*', '\x2', 
		'\x2', '\x85', '\x11', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', 
		'!', '\x2', '\x2', '\x87', '\x88', '\a', '\x1A', '\x2', '\x2', '\x88', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\a', '\"', '\x2', 
		'\x2', '\x8A', '\x8B', '\a', '\x1A', '\x2', '\x2', '\x8B', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8E', '\a', ' ', '\x2', '\x2', '\x8D', 
		'\x8F', '\x5', '\x1E', '\x10', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x91', '\a', '\x1A', '\x2', '\x2', '\x91', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\x1F', '\x2', 
		'\x2', '\x93', '\x96', '\a', '*', '\x2', '\x2', '\x94', '\x95', '\a', 
		'\x3', '\x2', '\x2', '\x95', '\x97', '\x5', '\x1E', '\x10', '\x2', '\x96', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', 
		'\x1A', '\x2', '\x2', '\x99', '\x19', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9B', '\x5', '\x1C', '\xF', '\x2', '\x9B', '\x9C', '\a', '\x1A', '\x2', 
		'\x2', '\x9C', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', 
		'*', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x3', '\x2', '\x2', '\x9F', 
		'\xA2', '\x5', '\x1E', '\x10', '\x2', '\xA0', '\xA2', '\x5', '\x1E', '\x10', 
		'\x2', '\xA1', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA4', '\x5', ' ', '\x11', '\x2', '\xA4', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA6', '\b', '\x11', '\x1', '\x2', '\xA6', '\xA7', '\x5', 
		'\"', '\x12', '\x2', '\xA7', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA9', '\f', '\x4', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x11', '\x2', 
		'\x2', '\xAA', '\xAC', '\x5', '\"', '\x12', '\x2', '\xAB', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '!', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB1', '\b', '\x12', '\x1', '\x2', '\xB1', 
		'\xB2', '\x5', '$', '\x13', '\x2', '\xB2', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB4', '\f', '\x4', '\x2', '\x2', '\xB4', '\xB5', '\a', 
		'\x12', '\x2', '\x2', '\xB5', '\xB7', '\x5', '$', '\x13', '\x2', '\xB6', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '#', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\b', '\x13', '\x1', 
		'\x2', '\xBC', '\xBD', '\x5', '&', '\x14', '\x2', '\xBD', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBF', '\f', '\x4', '\x2', '\x2', '\xBF', 
		'\xC0', '\a', '\x10', '\x2', '\x2', '\xC0', '\xC2', '\x5', '&', '\x14', 
		'\x2', '\xC1', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\b', 
		'\x14', '\x1', '\x2', '\xC7', '\xC8', '\x5', '(', '\x15', '\x2', '\xC8', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\f', '\x4', '\x2', 
		'\x2', '\xCA', '\xCB', '\t', '\x2', '\x2', '\x2', '\xCB', '\xCD', '\x5', 
		'(', '\x15', '\x2', '\xCC', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\x5', '*', '\x16', '\x2', '\xD2', '\xD3', '\t', '\x3', '\x2', 
		'\x2', '\xD3', '\xD4', '\x5', '*', '\x16', '\x2', '\xD4', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD7', '\x5', '*', '\x16', '\x2', '\xD6', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', ')', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\b', 
		'\x16', '\x1', '\x2', '\xD9', '\xDA', '\x5', ',', '\x17', '\x2', '\xDA', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\f', '\x4', '\x2', 
		'\x2', '\xDC', '\xDD', '\t', '\x4', '\x2', '\x2', '\xDD', '\xDF', '\x5', 
		',', '\x17', '\x2', '\xDE', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\b', '\x17', '\x1', '\x2', '\xE4', '\xE5', '\x5', '.', '\x18', 
		'\x2', '\xE5', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\f', 
		'\x4', '\x2', '\x2', '\xE7', '\xE8', '\t', '\x5', '\x2', '\x2', '\xE8', 
		'\xEA', '\x5', '.', '\x18', '\x2', '\xE9', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'-', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEF', '\t', '\x6', '\x2', '\x2', '\xEF', '\xF2', '\x5', 
		'\x30', '\x19', '\x2', '\xF0', '\xF2', '\x5', '\x30', '\x19', '\x2', '\xF1', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '/', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\b', 
		'\x19', '\x1', '\x2', '\xF4', '\xF5', '\x5', '\x32', '\x1A', '\x2', '\xF5', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\f', '\x4', '\x2', 
		'\x2', '\xF7', '\xF8', '\a', '\x1C', '\x2', '\x2', '\xF8', '\xFA', '\x5', 
		'\x32', '\x1A', '\x2', '\xF9', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFF', '\a', '*', '\x2', '\x2', '\xFF', '\x103', '\a', '\x16', '\x2', 
		'\x2', '\x100', '\x102', '\x5', '\x1E', '\x10', '\x2', '\x101', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x106', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x106', '\x109', '\a', '\x17', '\x2', 
		'\x2', '\x107', '\x109', '\x5', '\x34', '\x1B', '\x2', '\x108', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x33', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\a', '*', 
		'\x2', '\x2', '\x10B', '\x10C', '\a', '\t', '\x2', '\x2', '\x10C', '\x10F', 
		'\x5', '\x30', '\x19', '\x2', '\x10D', '\x10F', '\x5', '\x36', '\x1C', 
		'\x2', '\x10E', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x116', '\a', '\x14', '\x2', '\x2', '\x111', '\x116', '\a', 
		'\x15', '\x2', '\x2', '\x112', '\x116', '\x5', ':', '\x1E', '\x2', '\x113', 
		'\x116', '\a', ')', '\x2', '\x2', '\x114', '\x116', '\x5', '\x38', '\x1D', 
		'\x2', '\x115', '\x110', '\x3', '\x2', '\x2', '\x2', '\x115', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x37', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x118', '\a', '\x16', '\x2', '\x2', '\x118', '\x119', '\x5', '\x1E', 
		'\x10', '\x2', '\x119', '\x11A', '\a', '\x17', '\x2', '\x2', '\x11A', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\a', '*', '\x2', 
		'\x2', '\x11C', ';', '\x3', '\x2', '\x2', '\x2', '\x1C', '?', '\x45', 
		'R', 'W', '\x61', 'h', 'l', 'v', 'z', '~', '\x8E', '\x96', '\xA1', '\xAD', 
		'\xB8', '\xC3', '\xCE', '\xD6', '\xE0', '\xEB', '\xF1', '\xFB', '\x103', 
		'\x108', '\x10E', '\x115',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
